# -*- coding: utf-8 -*-
"""Demanda script

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8WDd2DEGPKxHSZxuskdB5w2lILFvrrP
"""

from scipy.integrate import quad
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.path import Path
from matplotlib.patches import PathPatch

class Market:

    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        if a < c:
            raise ValueError('Insufficient demand!')    

    def price(self):
        # Returns equilibrium price
        return (self.a - self.c) / (self.d + self.b)

    def quantity(self):
        # Returns equilibrium quantity
        return self.a - self.b * self.price()

    def inverse_demand(self, x):
        return (self.a - x) / self.b

    def inverse_supply(self, x):
        return (x - self.c) / self.d

    def consumer_surplus(self):
        integrand = lambda x: (self.a - x) / self.b
        area, error = quad(integrand, 0, self.quantity())
        return area - self.price() * self.quantity()

    def producer_surplus(self):
        integrand = lambda x: (x - self.c) / self.d
        area, error = quad(integrand, 0, self.quantity())
        return self.price() * self.quantity() - area

a = 15
b = 0.5
c = -2
d = 0.5

m = Market(a, b, c, d)

print("Equilibrium Price = ", m.price())
print("Equilibrium Quantity = ", m.quantity())

print('Consumer Surplus =', m.consumer_surplus())
print('Producer Surplus =', m.producer_surplus())

q_max = m.quantity() * 2
q_grid = np.linspace(0.0, q_max, 100)

pd = m.inverse_demand(q_grid)
ps = m.inverse_supply(q_grid)

fig, ax = plt.subplots(figsize=(12,6))

ax.plot(q_grid, pd, lw=2, alpha=0.6, label='Demand', color='red')
ax.plot(q_grid, ps, lw=2, alpha=0.6, label='Supply', color='blue')

ax.axhline(17,0,0.5,linewidth=2, color='black', linestyle = 'dashed')
ax.axvline(6.5,0,0.5,linewidth=2, color='black',linestyle='dashed')

path1 = Path([[0,17],[0,30],[6.5,17],[0,17]])
patch1 = PathPatch(path1, facecolor='silver')
ax.add_patch(patch1)

path2 = Path([[0,4],[0,17],[6.5,17],[0,4]])
patch2 = PathPatch(path2, facecolor='plum')
ax.add_patch(patch2)

ax.text(6.5, 17, 'Equilibrium Point',fontsize=12)
ax.text(1, 22, 'Consumer Surplus',fontsize=12)
ax.text(1, 14, 'Producer Surplus',fontsize=12)

ax.text(0, 17, '$P^{*}$',fontsize=14)
ax.text(6.5, 0, '$Q^{*}$',fontsize=14)

ax.set_xlabel('Quantity')
ax.set_xlim(0, q_max)
ax.set_ylabel('Price')
ax.legend(loc='best')

Change in P*	Change in Q*
Supply increases	P ⇓	Q ⇑
Supply decreases	P ⇑	Q ⇓
Demand increases	P ⇑	Q ⇑
Demand decreases	P ⇓	Q ⇓
Demand increases, Supply increases	P ⇕, (indeterminate)	Q ⇑
Demand increases, Supply decreases	P ⇑	Q ⇕, (indeterminate)
Demand decreases, Supply increases	P ⇓	Q ⇕, (indeterminate)
Demand decreases, Supply decreases	P ⇕, (indeterminate)	Q ⇓

