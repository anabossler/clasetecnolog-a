# -*- coding: utf-8 -*-
"""PulP-linear programming to marketselection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DFNvbpnu4yNb0cDRy4qDVihElc0pvwBU
"""

!pip install pulp
!apt-get install -y -qq glpk-utils

# Commented out IPython magic to ensure Python compatibility.
# % pip install pulp            # PuLP
# % apt-get install glpk-utils  # GLPK

from pulp import *

import pandas as pd 
import numpy as np

prob = LpProblem('Simple_Problem', LpMaximize)

country = pd.read_csv('/content/basededatosexpo - Hoja 1.csv', header=0)

countrysuper = pd.read_csv('/content/vinotrabajo - Sheet1 (8).csv', header=0)

new = pd.merge(country, countrysuper, on='Pais')
new

new = new.drop(['Marca'],axis=1)
new

countryitens = list(new['Pais'])

costs = dict(zip(countryitens, new['preciolitro']))

quantity = dict(zip(countryitens, new['cantidad']))

costis = dict(zip(countryitens, new['precio']))

distancia = dict(zip(countryitens, new['Distancia']))

total = LpVariable.dicts("total",countryitens,lowBound=0,cat='Continuous')

prob += lpSum([costs[i]*total[i] for i in countryitens])

prob += lpSum([quantity[f] * total[f] for f in total]) >= 0
prob += lpSum([quantity[f] * total[f] for f in total]) <= 13000000.0

prob.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob.status])

for v in prob.variables():
    if v.varValue>0:
        print(v.name, "=", v.varValue)

obj = value(prob.objective)
print("resultado: ${}".format(round(obj,2)))

new['Pais'] = new['Pais'].map({'Alemania': 0, 'Belgica': 1, 'Italia': 0, 'Francia': 1})
new

countryitens = LpVariable.dicts("Chosen",countryitens,0,1,cat='Integer')

for f in countryitens:
    prob += countryitens[f]>= countryitens[f]*0.1
    prob += countryitens[f]<= countryitens[f]*1e5

prob += countryitens['Italia']+countryitens['Francia']<=1

prob.solve()

for v in prob.variables():
    if v.varValue>0:
        print(v.name, "=", v.varValue)

3.14**3.14

"""https://towardsdatascience.com/linear-programming-and-discrete-optimization-with-python-using-pulp-449f3c5f6e99"""

2x + y <= 100
  x + y <= 80
  x <=40

from pulp import *

x = LpVariable("x1", 0, 40)   # 0<= x <= 40
y = LpVariable("x2", 0, 1000) # 0<= y <= 1000

prob = LpProblem("problem", LpMaximize)

prob += 2*x + y <= 100 
prob += x + y <= 80

prob += 3*x+2*y

status = prob.solve(GLPK(msg=0))
LpStatus[status]

value(x)

value(y)